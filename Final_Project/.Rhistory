s4_sum_class_size <- equivalence_classes %>%
group_by(s4_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
print(s4_sum_class_size)
# Create a table with risk ranges
risk_ranges <- data.frame(
Risk = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"),
S1 = c("99.2%", "0.05%", "0.03%", "0", "0", "0"),
S2 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0"),
S3 = c("99.8%", "0.02%", "0", "0", "0", "0"),
S4 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0")
)
risk_ranges_table <- kable(risk_ranges, format = "latex") %>%
kable_styling(full_width = FALSE)
risk_ranges_table
# Load packages
library(tidyverse)
library(readxl)
library(kableExtra)
library(rmarkdown)
library(knitr)
# Read in dataset
customer_df <- read_excel("Data/Customer_Data.xlsx")
# Select variables to be shared
customer_selects_df <- customer_df %>%
select(gender = Gender, age = Age, phoneco_tenure = PhoneCoTenure,
education_years = EducationYears, marital_status = MaritalStatus)
cat(ifelse(any(customer_selects_df$gender != 0 & customer_selects_df$gender != 1),
paste("Numbers in 'gender' column that are not 0 or 1:",
customer_selects_df$gender[customer_selects_df$gender != 0 & customer_selects_df$gender != 1], sep = "\n"),
"None found in 'gender' column"), "\n")
cat(ifelse(length(customer_selects_df$gender[is.na(customer_selects_df$gender)]) > 0,
paste("NULL or NA values in 'gender' column:",
customer_selects_df$gender[is.na(customer_selects_df$gender)],
sep = "\n"), "None found in 'gender' column"), "\n")
# No outliers or null values found in the gender column
customer_selects_df %>%
arrange(age) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(age)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$age[is.na(customer_selects_df$age)]) > 0,
paste("NULL or NA values in 'age' column:",
customer_selects_df$age[is.na(customer_selects_df$age)],
sep = "\n"), "None found in 'age' column"), "\n")
# No outliers or null values found in the age column
customer_selects_df %>%
arrange(phoneco_tenure) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(phoneco_tenure)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$phoneco_tenure[is.na(customer_selects_df$phoneco_tenure)]) > 0,
paste("NULL or NA values in 'phoneco_tenure' column:",
customer_selects_df$phoneco_tenure[is.na(customer_selects_df$phoneco_tenure)],
sep = "\n"), "None found in 'phoneco_tenure' column"), "\n")
# No outliers or null values found in the phoneco_tenure column
customer_selects_df %>%
arrange(education_years) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(education_years)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$education_years[is.na(customer_selects_df$education_years)]) > 0,
paste("NULL or NA values in 'education_years' column:",
customer_selects_df$education_years[is.na(customer_selects_df$education_years)],
sep = "\n"), "None found in 'education_years' column"), "\n")
# No outliers or null values found in the education_years column
cat(ifelse(any(customer_selects_df$marital_status != 0 & customer_selects_df$marital_status != 1),
paste("Numbers in 'marital_status' column that are not 0 or 1:",
customer_selects_df$marital_status[customer_selects_df$marital_status != 0 & customer_selects_df$marital_status != 1], sep = "\n"),
"None found in 'marital_status' column"), "\n")
cat(ifelse(length(customer_selects_df$marital_status[is.na(customer_selects_df$marital_status)]) > 0,
paste("NULL or NA values in 'marital_status' column:",
customer_selects_df$marital_status[is.na(customer_selects_df$marital_status)],
sep = "\n"), "None found in 'marital_status' column"), "\n")
# No outliers or null values found in the marital_status column
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(head(equivalence_classes %>% arrange(class_size)))
# There are currently many equivalence classes with only one customer, and a maximum of 6 customers in an equivalence class
# Group age by a 15 year range, with <25 and 55+ as the upper and lowers
customer_selects_df$age <- cut(customer_selects_df$age,
breaks = c(0, 30, 45, 60, 100),
labels = c("<30", "30-44", "45-59", "60+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(equivalence_classes %>% arrange(class_size))
# There are still many unique customers, so more grouping needs to be done
# Group education_years by <15 (no college degree) or 15+ (college degree)
customer_selects_df$education_years <- cut(customer_selects_df$education_years,
breaks = c(0, 15, 100),
labels = c("<15", "15+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(equivalence_classes %>% arrange(class_size))
# There are still many unique customers, so we will now group within the phoneco_tenure column
# Group phoneco_tenure by 24 months
customer_selects_df$phoneco_tenure <- cut(customer_selects_df$phoneco_tenure,
breaks = c(-1, 24, 48, 72, 100),
labels = c("<24", "24-47", "48-72", "72+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(head(equivalence_classes %>% arrange(class_size)))
equivalence_classes <- equivalence_classes %>%
mutate(p_re_id = round(1/ class_size, 2))
# Calculate the maximum and median risks
p_max <- max(equivalence_classes$p_re_id)
print(p_max)
p_med <- median(equivalence_classes$p_re_id)
print(p_med)
# Formula: p(re-id|attempt) * p(attempt)
# Being conservative and assuming the mitigating controls are low and the motives and capacity are high, p(attempt) = 0.6
p_attempt <- 0.6
# Calculation with max probability of re-identification
s1_max_risk <- ((p_max*p_attempt)/p_attempt)*p_attempt
print(s1_max_risk)
# Calculation with median probability of re-identification
s1_med_risk <- ((p_med*p_attempt)/p_attempt)*p_attempt
print(s1_med_risk)
# Formulas: p(re-id|acquanit) * p(acquaint), p(acquaint) = 1-(1-p)^m
p <- 0.97
m <- 150
p_acquaint <- 1-(1-p)^m
# Calculation with max probability of re-identification
s2_max_risk <- ((p_max*p_acquaint)/p_acquaint)*p_acquaint
print(s2_max_risk)
# Calculation with median probability of re-identification
s2_med_risk <- ((p_med*p_acquaint)/p_acquaint)*p_acquaint
print(s2_med_risk)
# Formula: p(re-id|breach)*p(breach)
# Being conservative, we will assume the likelihood of a breach is the same as that of a healthcare company at 27%
p_breach <- 0.27
# Calculation with max probability of re-identification
s3_max_risk <- ((p_max*p_breach)/p_breach)*p_breach
print(s3_max_risk)
# Calculation with median probability of re-identification
s3_med_risk <- ((p_med*p_breach)/p_breach)*p_breach
print(s3_med_risk)
# Formula: p(re-id)
# Calculation with max probability of re-identification
s4_max_risk <- p_max
print(s4_max_risk)
# Calculation with median probability of re-identification
s4_med_risk <- p_med
print(s4_med_risk)
risk_results <- data.frame(
Results = c("Max Risk", "Median Risk", "Assessment"),
S1 = c("30%", "1.2%", "Tolerable"),
S2 = c("50%", "2%", "Unacceptable"),
S3 = c("13.5%", "0.05%", "Tolerable"),
S4 = c("50%", "2%", "Unacceptable")
)
risk_table <- kable(risk_results, format = "markdown") %>%
kable_styling(full_width = FALSE)
risk_table <- risk_table %>%
column_spec(1, background = "lightgray") %>%
column_spec(2, background = "green") %>%
column_spec(3, background = "red") %>%
column_spec(4, background = "green") %>%
column_spec(5, background = "red")
# Print the formatted table
risk_table
# Scenario 1
equivalence_classes <- equivalence_classes %>%
mutate(s1_risk = round(((p_re_id*p_attempt)/p_attempt)*p_attempt, 2))
# Scenario 2
equivalence_classes <- equivalence_classes %>%
mutate(s2_risk = round(((p_re_id*p_acquaint)/p_acquaint)*p_acquaint, 2))
# Scenario 3
equivalence_classes <- equivalence_classes %>%
mutate(s3_risk = round(((p_re_id*p_breach)/p_breach)*p_breach, 2))
# Scenario 4
equivalence_classes <- equivalence_classes %>%
mutate(s4_risk = round(p_re_id, 2))
# Create risk ranges
equivalence_classes$s1_risk <- cut(equivalence_classes$s1_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s2_risk <- cut(equivalence_classes$s2_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s3_risk <- cut(equivalence_classes$s3_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s4_risk <- cut(equivalence_classes$s4_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
# Count the class size for each risk range
s1_sum_class_size <- equivalence_classes %>%
group_by(s1_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
print(s1_sum_class_size)
s2_sum_class_size <- equivalence_classes %>%
group_by(s2_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
print(s2_sum_class_size)
s3_sum_class_size <- equivalence_classes %>%
group_by(s3_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
print(s3_sum_class_size)
s4_sum_class_size <- equivalence_classes %>%
group_by(s4_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
print(s4_sum_class_size)
# Create a table with risk ranges
risk_ranges <- data.frame(
Risk = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"),
S1 = c("99.2%", "0.05%", "0.03%", "0", "0", "0"),
S2 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0"),
S3 = c("99.8%", "0.02%", "0", "0", "0", "0"),
S4 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0")
)
risk_ranges_table <- kable(risk_ranges, format = "markdown") %>%
kable_styling(full_width = FALSE)
risk_ranges_table
risk_results <- data.frame(
Results = c("Max Risk", "Median Risk", "Assessment"),
S1 = c("30%", "1.2%", "Tolerable"),
S2 = c("50%", "2%", "Unacceptable"),
S3 = c("13.5%", "0.05%", "Tolerable"),
S4 = c("50%", "2%", "Unacceptable")
)
risk_table <- kable(risk_results, format = "latex") %>%
kable_styling(full_width = FALSE, latex_options = "HOLD_position")
risk_table <- risk_table %>%
column_spec(1, background = "lightgray") %>%
column_spec(2, background = "green") %>%
column_spec(3, background = "red") %>%
column_spec(4, background = "green") %>%
column_spec(5, background = "red")
# Print the formatted table
risk_table
equivalence_classes <- equivalence_classes %>%
mutate(p_re_id = round(1/ class_size, 2))
# Calculate the maximum and median risks
p_max <- max(equivalence_classes$p_re_id)
cat("The maximum probability of re-identification is: ", p_max, "\n")
p_med <- median(equivalence_classes$p_re_id)
cat("The median probability of re-identification is: ", p_med, "\n")
equivalence_classes <- equivalence_classes %>%
mutate(p_re_id = round(1/ class_size, 2))
# Calculate the maximum and median risks
p_max <- max(equivalence_classes$p_re_id)
cat("The maximum probability of re-identification is:", p_max, "\n")
p_med <- median(equivalence_classes$p_re_id)
cat("The median probability of re-identification is:", p_med, "\n")
# Formula: p(re-id|attempt) * p(attempt)
# Being conservative and assuming the mitigating controls are low and the motives and capacity are high, p(attempt) = 0.6
p_attempt <- 0.6
# Calculation with max probability of re-identification
s1_max_risk <- ((p_max*p_attempt)/p_attempt)*p_attempt
cat("The maximum probability of re-identification for scenario 1 is: ", s1_max_risk, "\n")
# Calculation with median probability of re-identification
s1_med_risk <- ((p_med*p_attempt)/p_attempt)*p_attempt
print(s1_med_risk)
# Formula: p(re-id|attempt) * p(attempt)
# Being conservative and assuming the mitigating controls are low and the motives and capacity are high, p(attempt) = 0.6
p_attempt <- 0.6
# Calculation with max probability of re-identification
s1_max_risk <- ((p_max*p_attempt)/p_attempt)*p_attempt
cat("The maximum probability of re-identification for scenario 1 is:", s1_max_risk, "\n")
# Calculation with median probability of re-identification
s1_med_risk <- ((p_med*p_attempt)/p_attempt)*p_attempt
print(s1_med_risk)
# Formula: p(re-id|attempt) * p(attempt)
# Being conservative and assuming the mitigating controls are low and the motives and capacity are high, p(attempt) = 0.6
p_attempt <- 0.6
# Calculation with max probability of re-identification
s1_max_risk <- ((p_max*p_attempt)/p_attempt)*p_attempt
cat("The maximum probability of re-identification for scenario 1 is:", s1_max_risk, "\n")
# Calculation with median probability of re-identification
s1_med_risk <- ((p_med*p_attempt)/p_attempt)*p_attempt
cat("The median probability of re-identification for scenario 1 is:", s1_med_risk, "\n")
# Load packages
library(tidyverse)
library(readxl)
library(kableExtra)
library(rmarkdown)
library(knitr)
# Read in dataset
customer_df <- read_excel("Data/Customer_Data.xlsx")
# Select variables to be shared
customer_selects_df <- customer_df %>%
select(gender = Gender, age = Age, phoneco_tenure = PhoneCoTenure,
education_years = EducationYears, marital_status = MaritalStatus)
cat(ifelse(any(customer_selects_df$gender != 0 & customer_selects_df$gender != 1),
paste("Numbers in 'gender' column that are not 0 or 1:",
customer_selects_df$gender[customer_selects_df$gender != 0 & customer_selects_df$gender != 1], sep = "\n"),
"None found in 'gender' column"), "\n")
cat(ifelse(length(customer_selects_df$gender[is.na(customer_selects_df$gender)]) > 0,
paste("NULL or NA values in 'gender' column:",
customer_selects_df$gender[is.na(customer_selects_df$gender)],
sep = "\n"), "None found in 'gender' column"), "\n")
# No outliers or null values found in the gender column
customer_selects_df %>%
arrange(age) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(age)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$age[is.na(customer_selects_df$age)]) > 0,
paste("NULL or NA values in 'age' column:",
customer_selects_df$age[is.na(customer_selects_df$age)],
sep = "\n"), "None found in 'age' column"), "\n")
# No outliers or null values found in the age column
customer_selects_df %>%
arrange(phoneco_tenure) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(phoneco_tenure)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$phoneco_tenure[is.na(customer_selects_df$phoneco_tenure)]) > 0,
paste("NULL or NA values in 'phoneco_tenure' column:",
customer_selects_df$phoneco_tenure[is.na(customer_selects_df$phoneco_tenure)],
sep = "\n"), "None found in 'phoneco_tenure' column"), "\n")
# No outliers or null values found in the phoneco_tenure column
customer_selects_df %>%
arrange(education_years) %>%
head(5) %>%
print()
customer_selects_df %>%
arrange(desc(education_years)) %>%
head(5) %>%
print()
cat(ifelse(length(customer_selects_df$education_years[is.na(customer_selects_df$education_years)]) > 0,
paste("NULL or NA values in 'education_years' column:",
customer_selects_df$education_years[is.na(customer_selects_df$education_years)],
sep = "\n"), "None found in 'education_years' column"), "\n")
# No outliers or null values found in the education_years column
cat(ifelse(any(customer_selects_df$marital_status != 0 & customer_selects_df$marital_status != 1),
paste("Numbers in 'marital_status' column that are not 0 or 1:",
customer_selects_df$marital_status[customer_selects_df$marital_status != 0 & customer_selects_df$marital_status != 1], sep = "\n"),
"None found in 'marital_status' column"), "\n")
cat(ifelse(length(customer_selects_df$marital_status[is.na(customer_selects_df$marital_status)]) > 0,
paste("NULL or NA values in 'marital_status' column:",
customer_selects_df$marital_status[is.na(customer_selects_df$marital_status)],
sep = "\n"), "None found in 'marital_status' column"), "\n")
# No outliers or null values found in the marital_status column
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(head(equivalence_classes %>% arrange(class_size)))
# There are currently many equivalence classes with only one customer, and a maximum of 6 customers in an equivalence class
# Group age by a 15 year range, with <25 and 55+ as the upper and lowers
customer_selects_df$age <- cut(customer_selects_df$age,
breaks = c(0, 30, 45, 60, 100),
labels = c("<30", "30-44", "45-59", "60+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(equivalence_classes %>% arrange(class_size))
# There are still many unique customers, so more grouping needs to be done
# Group education_years by <15 (no college degree) or 15+ (college degree)
customer_selects_df$education_years <- cut(customer_selects_df$education_years,
breaks = c(0, 15, 100),
labels = c("<15", "15+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(equivalence_classes %>% arrange(class_size))
# There are still many unique customers, so we will now group within the phoneco_tenure column
# Group phoneco_tenure by 24 months
customer_selects_df$phoneco_tenure <- cut(customer_selects_df$phoneco_tenure,
breaks = c(-1, 24, 48, 72, 100),
labels = c("<24", "24-47", "48-72", "72+"))
# Check equivalence classes
equivalence_classes <- customer_selects_df %>%
group_by_all() %>%
tally(name = "class_size")
print(head(equivalence_classes %>% arrange(class_size)))
equivalence_classes <- equivalence_classes %>%
mutate(p_re_id = round(1/ class_size, 2))
# Calculate the maximum and median risks
p_max <- max(equivalence_classes$p_re_id)
cat("The maximum probability of re-identification is:", p_max, "\n")
p_med <- median(equivalence_classes$p_re_id)
cat("The median probability of re-identification is:", p_med, "\n")
# Formula: p(re-id|attempt) * p(attempt)
# Being conservative and assuming the mitigating controls are low and the motives and capacity are high, p(attempt) = 0.6
p_attempt <- 0.6
# Calculation with max probability of re-identification
s1_max_risk <- ((p_max*p_attempt)/p_attempt)*p_attempt
cat("The maximum probability of re-identification for scenario 1 is:", s1_max_risk, "\n")
# Calculation with median probability of re-identification
s1_med_risk <- ((p_med*p_attempt)/p_attempt)*p_attempt
cat("The median probability of re-identification for scenario 1 is:", s1_med_risk, "\n")
# Formulas: p(re-id|acquanit) * p(acquaint), p(acquaint) = 1-(1-p)^m
p <- 0.97
m <- 150
p_acquaint <- 1-(1-p)^m
# Calculation with max probability of re-identification
s2_max_risk <- ((p_max*p_acquaint)/p_acquaint)*p_acquaint
cat("The maximum probability of re-identification for scenario 2 is:", s2_max_risk, "\n")
# Calculation with median probability of re-identification
s2_med_risk <- ((p_med*p_acquaint)/p_acquaint)*p_acquaint
cat("The median probability of re-identification for scenario 2 is:", s2_med_risk, "\n")
# Formula: p(re-id|breach)*p(breach)
# Being conservative, we will assume the likelihood of a breach is the same as that of a healthcare company at 27%
p_breach <- 0.27
# Calculation with max probability of re-identification
s3_max_risk <- ((p_max*p_breach)/p_breach)*p_breach
cat("The maximum probability of re-identification for scenario 3 is:", s3_max_risk, "\n")
# Calculation with median probability of re-identification
s3_med_risk <- ((p_med*p_breach)/p_breach)*p_breach
cat("The median probability of re-identification for scenario 3 is:", s3_med_risk, "\n")
# Formula: p(re-id)
# Calculation with max probability of re-identification
s4_max_risk <- p_max
cat("The maximum probability of re-identification for scenario 4 is:", s4_max_risk, "\n")
# Calculation with median probability of re-identification
s4_med_risk <- p_med
cat("The median probability of re-identification for scenario 4 is:", s4_med_risk, "\n")
risk_results <- data.frame(
Results = c("Max Risk", "Median Risk", "Assessment"),
S1 = c("30%", "1.2%", "Tolerable"),
S2 = c("50%", "2%", "Unacceptable"),
S3 = c("13.5%", "0.05%", "Tolerable"),
S4 = c("50%", "2%", "Unacceptable")
)
risk_table <- kable(risk_results, format = "latex") %>%
kable_styling(full_width = FALSE, latex_options = "HOLD_position")
risk_table <- risk_table %>%
column_spec(1, background = "lightgray") %>%
column_spec(2, background = "green") %>%
column_spec(3, background = "red") %>%
column_spec(4, background = "green") %>%
column_spec(5, background = "red")
# Print the formatted table
risk_table
# Scenario 1
equivalence_classes <- equivalence_classes %>%
mutate(s1_risk = round(((p_re_id*p_attempt)/p_attempt)*p_attempt, 2))
# Scenario 2
equivalence_classes <- equivalence_classes %>%
mutate(s2_risk = round(((p_re_id*p_acquaint)/p_acquaint)*p_acquaint, 2))
# Scenario 3
equivalence_classes <- equivalence_classes %>%
mutate(s3_risk = round(((p_re_id*p_breach)/p_breach)*p_breach, 2))
# Scenario 4
equivalence_classes <- equivalence_classes %>%
mutate(s4_risk = round(p_re_id, 2))
# Create risk ranges
equivalence_classes$s1_risk <- cut(equivalence_classes$s1_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s2_risk <- cut(equivalence_classes$s2_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s3_risk <- cut(equivalence_classes$s3_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
equivalence_classes$s4_risk <- cut(equivalence_classes$s4_risk,
breaks = c(-1, 0.05, 0.10, 0.20, 0.33, 0.5, 1),
labels = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"))
# Count the class size for each risk range
s1_sum_class_size <- equivalence_classes %>%
group_by(s1_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
s2_sum_class_size <- equivalence_classes %>%
group_by(s2_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
s3_sum_class_size <- equivalence_classes %>%
group_by(s3_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
s4_sum_class_size <- equivalence_classes %>%
group_by(s4_risk) %>%
summarize(percent_risk = (sum(class_size)/5000)) %>%
ungroup()
# Create a table with risk ranges
risk_ranges <- data.frame(
Risk = c("<5%", "<10%", "<20%", "<33%", "<50%", ">50%"),
S1 = c("99.2%", "0.05%", "0.03%", "0", "0", "0"),
S2 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0"),
S3 = c("99.8%", "0.02%", "0", "0", "0", "0"),
S4 = c("96.5%", "2.7%", "0.06%", "0.02%", "0", "0")
)
risk_ranges_table <- kable(risk_ranges, format = "latex") %>%
kable_styling(full_width = FALSE, latex_options = "HOLD_position")
risk_ranges_table
View(customer_df)
View(customer_df)
View(equivalence_classes)
median(equivalence_classes$class_size)
